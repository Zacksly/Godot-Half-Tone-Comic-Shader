[gd_resource type="VisualShader" load_steps=30 format=2]

[sub_resource type="VisualShaderNodeVectorCompose" id=1]

[sub_resource type="VisualShaderNodeScalarUniform" id=2]
uniform_name = "Dots"

[sub_resource type="VisualShaderNodeScalarUniform" id=3]
uniform_name = "AspectRatio"

[sub_resource type="VisualShaderNodeScalarOp" id=4]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeVectorFunc" id=6]
function = 20

[sub_resource type="VisualShaderNodeVectorDistance" id=7]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0.5 ) ]

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeCompare" id=9]
function = 4

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeScalarUniform" id=11]
uniform_name = "min"

[sub_resource type="VisualShaderNodeScalarUniform" id=12]
uniform_name = "max"

[sub_resource type="VisualShaderNodeTexture" id=13]
source = 1

[sub_resource type="VisualShaderNodeVectorClamp" id=14]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.05, 0.05, 0.05 ), 2, Vector3( 1, 1, 1 ) ]

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeTexture" id=16]
source = 1

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorOp" id=18]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=19]
default_input_values = [ 0, Vector3( 1, 1, 1 ), 1, Vector3( 0, 0, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeSwitch" id=20]

[sub_resource type="VisualShaderNodeBooleanUniform" id=21]
uniform_name = "BlackDot"

[sub_resource type="VisualShaderNodeSwitch" id=22]

[sub_resource type="VisualShaderNodeBooleanUniform" id=23]
uniform_name = "UseColor"

[sub_resource type="VisualShaderNodeCompare" id=24]
function = 2

[sub_resource type="VisualShaderNodeColorFunc" id=25]

[sub_resource type="VisualShaderNodeInput" id=26]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeExpression" id=27]
size = Vector2( 714.344, 332.912 )
expression = "vec3 c;
c = _in;
if ( abs(c.r - c.g) > .1 || abs(c.g - c.b) > .1 || abs(c.b - c.r) > .1 ){
	c.rgb = mix(vec3(0.0), c.rgb, 2); //Brightness
	c.rgb = mix(vec3(0.5), c.rgb, 1); // Contrast
	c.rgb = mix(vec3(dot(vec3(1.0), c.rgb)*0.33333), c.rgb, 2); //Saturation
} else {
	c= vec3(1.0,1.0,1.0);
}

_out.rgb = c;"

[sub_resource type="VisualShaderNodeBooleanUniform" id=28]
uniform_name = "UseReshade"

[sub_resource type="VisualShaderNodeSwitch" id=29]

[resource]
code = "shader_type canvas_item;
uniform bool UseColor;
uniform bool BlackDot;
uniform float AspectRatio;
uniform float Dots;
uniform float min;
uniform float max;
uniform bool UseReshade;



void vertex() {
// Output:0

}

void fragment() {
// BooleanUniform:64
	bool n_out64p0 = UseColor;

// BooleanUniform:62
	bool n_out62p0 = BlackDot;

// Input:5
	vec3 n_out5p0 = vec3(SCREEN_UV, 0.0);

// ScalarUniform:12
	float n_out12p0 = AspectRatio;

// ScalarUniform:11
	float n_out11p0 = Dots;

// ScalarOp:16
	float n_out16p0 = n_out12p0 * n_out11p0;

// VectorCompose:10
	float n_in10p2 = 0.00000;
	vec3 n_out10p0 = vec3(n_out16p0, n_out11p0, n_in10p2);

// VectorOp:17
	vec3 n_out17p0 = n_out5p0 * n_out10p0;

// VectorFunc:18
	vec3 n_out18p0 = fract(n_out17p0);

// Distance:19
	vec3 n_in19p1 = vec3(0.50000, 0.50000, 0.50000);
	float n_out19p0 = distance(n_out18p0, n_in19p1);

// Input:22
	vec3 n_out22p0 = vec3(SCREEN_UV, 0.0);

// Input:2

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = textureLod(SCREEN_TEXTURE, n_out22p0.xy, 0.0);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// ColorFunc:70
	vec3 n_out70p0;
	{
		vec3 c = n_out3p0;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		float max3 = max(max1, max2);
		n_out70p0 = vec3(max3, max3, max3);
	}

// ScalarUniform:27
	float n_out27p0 = min;

// ScalarUniform:28
	float n_out28p0 = max;

// VectorClamp:30
	vec3 n_out30p0 = clamp(n_out70p0, vec3(n_out27p0), vec3(n_out28p0));

// VectorOp:60
	vec3 n_in60p0 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out60p0 = n_in60p0 - n_out30p0;

// Compare:65
	bool n_out65p0 = n_out19p0>dot(n_out60p0, vec3(0.333333, 0.333333, 0.333333));

// Compare:20
	bool n_out20p0 = n_out19p0<dot(n_out30p0, vec3(0.333333, 0.333333, 0.333333));

// VectorSwitch:61
	vec3 n_out61p0;
	if(n_out62p0)
	{
		n_out61p0 = vec3(n_out65p0 ? 1.0 : 0.0);
	}
	else
	{
		n_out61p0 = vec3(n_out20p0 ? 1.0 : 0.0);
	}

// BooleanUniform:74
	bool n_out74p0 = UseReshade;

// Input:71
	vec3 n_out71p0 = vec3(SCREEN_UV, 0.0);

// Input:38

// Texture:39
	vec3 n_out39p0;
	float n_out39p1;
	{
		vec4 _tex_read = textureLod(SCREEN_TEXTURE, n_out71p0.xy, 0.0);
		n_out39p0 = _tex_read.rgb;
		n_out39p1 = _tex_read.a;
	}

// Expression:73
	vec3 n_out73p0;
	n_out73p0 = vec3(0.0, 0.0, 0.0);
	{
		vec3 c;
		c = n_out39p0;
		if ( abs(c.r - c.g) > .1 || abs(c.g - c.b) > .1 || abs(c.b - c.r) > .1 ){
			c.rgb = mix(vec3(0.0), c.rgb, 2); //Brightness
			c.rgb = mix(vec3(0.5), c.rgb, 1); // Contrast
			c.rgb = mix(vec3(dot(vec3(1.0), c.rgb)*0.33333), c.rgb, 2); //Saturation
		} else {
			c= vec3(1.0,1.0,1.0);
		}
		
		n_out73p0.rgb = c;
	}

// VectorSwitch:75
	vec3 n_out75p0;
	if(n_out74p0)
	{
		n_out75p0 = n_out73p0;
	}
	else
	{
		n_out75p0 = n_out39p0;
	}

// VectorOp:54
	vec3 n_out54p0 = n_out61p0 * n_out75p0;

// VectorSwitch:63
	vec3 n_out63p0;
	if(n_out64p0)
	{
		n_out63p0 = n_out54p0;
	}
	else
	{
		n_out63p0 = n_out61p0;
	}

// Output:0
	COLOR.rgb = n_out63p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -742.81, -253.052 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 2380, -20 )
nodes/fragment/2/node = SubResource( 8 )
nodes/fragment/2/position = Vector2( -760, 200 )
nodes/fragment/3/node = SubResource( 13 )
nodes/fragment/3/position = Vector2( -520, 100 )
nodes/fragment/5/node = SubResource( 17 )
nodes/fragment/5/position = Vector2( -940, -160 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -940, -40 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -1420, 60 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -1400, -60 )
nodes/fragment/16/node = SubResource( 4 )
nodes/fragment/16/position = Vector2( -1180, -80 )
nodes/fragment/17/node = SubResource( 5 )
nodes/fragment/17/position = Vector2( -680, -140 )
nodes/fragment/18/node = SubResource( 6 )
nodes/fragment/18/position = Vector2( -460, -120 )
nodes/fragment/19/node = SubResource( 7 )
nodes/fragment/19/position = Vector2( -220, -120 )
nodes/fragment/20/node = SubResource( 9 )
nodes/fragment/20/position = Vector2( 580, -100 )
nodes/fragment/22/node = SubResource( 10 )
nodes/fragment/22/position = Vector2( -760, 120 )
nodes/fragment/27/node = SubResource( 11 )
nodes/fragment/27/position = Vector2( -340, 180 )
nodes/fragment/28/node = SubResource( 12 )
nodes/fragment/28/position = Vector2( -340, 240 )
nodes/fragment/30/node = SubResource( 14 )
nodes/fragment/30/position = Vector2( -100, 120 )
nodes/fragment/38/node = SubResource( 15 )
nodes/fragment/38/position = Vector2( -380, 420 )
nodes/fragment/39/node = SubResource( 16 )
nodes/fragment/39/position = Vector2( 0, 340 )
nodes/fragment/54/node = SubResource( 18 )
nodes/fragment/54/position = Vector2( 1289.6, 112.832 )
nodes/fragment/60/node = SubResource( 19 )
nodes/fragment/60/position = Vector2( 220, 160 )
nodes/fragment/61/node = SubResource( 20 )
nodes/fragment/61/position = Vector2( 960, -20 )
nodes/fragment/62/node = SubResource( 21 )
nodes/fragment/62/position = Vector2( 900, -100 )
nodes/fragment/63/node = SubResource( 22 )
nodes/fragment/63/position = Vector2( 1580, 120 )
nodes/fragment/64/node = SubResource( 23 )
nodes/fragment/64/position = Vector2( 1360, 40 )
nodes/fragment/65/node = SubResource( 24 )
nodes/fragment/65/position = Vector2( 580, 120 )
nodes/fragment/70/node = SubResource( 25 )
nodes/fragment/70/position = Vector2( -340, 120 )
nodes/fragment/71/node = SubResource( 26 )
nodes/fragment/71/position = Vector2( -360, 340 )
nodes/fragment/73/node = SubResource( 27 )
nodes/fragment/73/position = Vector2( 240, 420 )
nodes/fragment/73/size = Vector2( 714.344, 332.912 )
nodes/fragment/73/input_ports = "0,1,_in;"
nodes/fragment/73/output_ports = "0,1,_out;"
nodes/fragment/73/expression = "vec3 c;
c = _in;
if ( abs(c.r - c.g) > .1 || abs(c.g - c.b) > .1 || abs(c.b - c.r) > .1 ){
	c.rgb = mix(vec3(0.0), c.rgb, 2); //Brightness
	c.rgb = mix(vec3(0.5), c.rgb, 1); // Contrast
	c.rgb = mix(vec3(dot(vec3(1.0), c.rgb)*0.33333), c.rgb, 2); //Saturation
} else {
	c= vec3(1.0,1.0,1.0);
}

_out.rgb = c;"
nodes/fragment/74/node = SubResource( 28 )
nodes/fragment/74/position = Vector2( 820, 320 )
nodes/fragment/75/node = SubResource( 29 )
nodes/fragment/75/position = Vector2( 1040, 320 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 2, 5, 0, 17, 0, 10, 0, 17, 1, 17, 0, 18, 0, 18, 0, 19, 0, 28, 0, 30, 2, 22, 0, 3, 0, 38, 0, 39, 2, 11, 0, 16, 1, 12, 0, 16, 0, 11, 0, 10, 1, 16, 0, 10, 0, 27, 0, 30, 1, 62, 0, 61, 0, 19, 0, 20, 0, 64, 0, 63, 0, 54, 0, 63, 1, 61, 0, 54, 0, 60, 0, 65, 1, 19, 0, 65, 0, 61, 0, 63, 2, 65, 0, 61, 1, 20, 0, 61, 2, 30, 0, 20, 1, 30, 0, 60, 1, 70, 0, 30, 0, 71, 0, 39, 0, 2, 0, 3, 2, 5, 0, 17, 0, 10, 0, 17, 1, 17, 0, 18, 0, 18, 0, 19, 0, 28, 0, 30, 2, 22, 0, 3, 0, 38, 0, 39, 2, 11, 0, 16, 1, 12, 0, 16, 0, 11, 0, 10, 1, 16, 0, 10, 0, 27, 0, 30, 1, 62, 0, 61, 0, 19, 0, 20, 0, 64, 0, 63, 0, 54, 0, 63, 1, 61, 0, 54, 0, 60, 0, 65, 1, 19, 0, 65, 0, 61, 0, 63, 2, 65, 0, 61, 1, 20, 0, 61, 2, 30, 0, 20, 1, 30, 0, 60, 1, 70, 0, 30, 0, 71, 0, 39, 0, 3, 0, 70, 0, 39, 0, 73, 0, 63, 0, 0, 0, 74, 0, 75, 0, 75, 0, 54, 1, 39, 0, 75, 2, 73, 0, 75, 1 )
